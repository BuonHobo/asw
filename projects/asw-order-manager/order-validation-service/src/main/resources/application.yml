# application.yml 
--- 
spring:
  application: 
    name: ordervalidationservice
  # CONSUL 
  cloud:
    consul:
      host: consul
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 45s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false

  datasource:
    url: jdbc:postgresql://order-validation-service-db-postgresql:5432/postgres
    username: postgres
    password: ordermanager
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    bootstrap-servers:  kafka-controller-0.kafka-controller-headless.default.svc.cluster.local:9092

    consumer:
      auto-offset-reset: earliest
      properties:
        spring:
          json:
            trusted:
              packages: "*"
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: ${spring.application.name}
  profiles:
    active: event

server:
  # port: ${PORT:${SERVER_PORT:0}}
  port: 8080
#  port: 8083 
  # per swagger dietro un api gateway 
  forward-headers-strategy: framework
  
# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false
